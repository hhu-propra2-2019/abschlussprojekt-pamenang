== Abschnitt 1 Einführung und Ziele
=== Aufgabe 1.1 Aufgabenstellung

Was ist das Klausurzulassungssystem?

- Verwaltung von Altklausurzulassungen
- Versenden von Klausurzulassungen per Mail
- Zulassungen verschlüsselt über Tokensystem
- Einreichung von Token für Klausurzulassungen

Wesentliche Features:

- Asymetrische, kryptographische Tokengenerierung
- Automatische Emailversendung

=== Aufgabe 1.2 Qualitätsziele

[cols="1,1" options="header"]
|===
|Qualitätsziel | Motivation und Erläuterung
| Einfache Benutzeroberfläche| Angenehme und selbsterklärende User Experience
| Automatiserung der Systemabläufe | Menschliche Fehlervermeidung und Vereinfachung für Nutzer
| Sichere Tokengenerierung| Eindeutige und sichere Tokenerstellung um Fälschungen zu vermeiden
|===


=== Aufgabe 1.3 Stakeholder

[cols="1,1" options="header"]
|===
|Wer? | Interesse/Bezug
| Studenten|
- wollen sich für Klausuren anmelden

- unkomplizierte Anmeldung

| Organisatoren |
- einfache Übermittlung der Zulassungen an Studenten

- wollen Verantwortlichkeiten an Studenten abgeben
|===

== Abschnitt 2 Randbedingungen
=== Aufgabe 2.1 Technisch

[cols="1,1" options="header"]
|===
|Randbedingungen | Erläuterungen und Hintergrund
| Implementierung in Java| Entwicklung unter Java 11
| Datenbank | Betrieb der Datenbank läuft auf MySQL. Dient zur Speicherung der Token, Studenten und Organisatoren
|===
=== Aufgabe 2.2 Organisatorisch

[cols="1,1" options="header"]
|===
|Randbedingungen | Erläuterungen und Hintergrund
|Team | Team bestehend aus 9 motivierten Studenten, die im GitHub Projekt zu finden sind
| Zeitplan | Beginn der Entwicklung am 03. März 2020, vorläufige Fertigstellung am 13. März. Ende der Entwicklung am 27. März
| Entwicklungswerkzeuge | Entwurf mit Stift und Papier. Erstellung der Quelltexte in IntelliJ. Erleichertung der Arbeit durch Gradle und Docker
| Konfigurations- und Versionsverwaltung | Git bei GitHub
| Testwerkzeuge und -prozesse | JUnit Vintage für Integrationstest sowie Spring Test
|===

=== Aufgabe 2.3 Konventionen

[cols="1,1" options="header"]
|===
|Randbedingungen | Erläuterungen und Hintergrund
| Sprache (Deutsch vs. Englisch)| Dokumentation sowie Kommunikation innerhalb der Gruppe auf Deutsch. Bennung von Klassen, Methoden sowie Variablen auf Deutsch außer gängige Anglizismen
| Coderichtlinien für Java | Prüfung durch CheckStyle, SpotBugs und Google-Java-Format
| Architekturdokumentation | Gliederung nach dem arc42-Template
|===

== Abschnitt 3 Kontextabgrenzung
=== Aufgabe 3.1 Fachlicher Kontext

==== Studenten (Benutzer)

    Der Student bekommt eine Mail mit einer Zulassungsbenachrichtigung und dem zugehörigen Token, nachdem er die Klausurzulassung bestanden hat. Der Student kann den Token
    auf der Weboberfläche einlösen, wenn er sich zur neuen Klausur zulassen möchte. Er bekommt eine visuelle Bestätigung ob dies erfolgreich war.

==== Organisator (Benutzer)

    Der Organisator reicht eine Zulassungsliste ein und kann Studenten manuell zulassen.

=== Aufgabe 3.2 Technischer Kontext

==== Tokengenerierung

    Token wird generiert und durch asymetrische Kryptographie verschlüsselt.

==== Tokenverifikation

    Token wird durch Public Key, gespeiechert in der Datenbank, verifiziert.

==== Email-Service

    Versendet Emails mit Zulassungsbenachrichtigung an Studenten.

==== Key-Cloak (Fremdsystem)

    Kümmert sich um die Anmeldung.

== Abschnitt 4 Lösungsstrategie
=== Aufgabe 4.1 Einstieg
=== Aufgabe 4.2 Aufbau
=== Aufgabe 4.3 Spielstrategie
=== Aufgabe 4.4 Anbindung

== Abschnitt 5 Bausteinsicht
=== Aufgabe 5.1 Ebene 1



== Abschnitt 6 Laufzeitsicht

Vor dem Semester kann der Organisator ein Modul für seine eigene Vorlesung erstellen.
Innerhalb des Semesters können Studenten sich mit Altzulassungen zur neuen Klausur mit dem Token verifizieren.
Sobald die Neuzulassungen feststehen kann der Organisator die Zulassungsliste hochladen, manuell prüfen und
die Zulassungen per Mail an die Studenten versenden. Studenten mit Neu- sowie auch Altzulassungen können sich
mit dem erhaltenen Key verifizieren. Organisatoren kann nach Ablauf der Frist manuell Studenten zulassen und am Ende
des Semesters das Modul löschen.


== Abschnitt 7 Verteukungssicht

== Abschnitt 8 Konzepte
=== Aufgabe 8.1 Abhängigkeiten
=== Aufgabe 8.2 Domänenmodell
=== Aufgabe 8.3 Benutzeroberfläche
=== Aufgabe 8.4 Validierung
=== Aufgabe 8.5 Fehlerbehandlung
=== Aufgabe 8.6 Protokollierung
=== Aufgabe 8.7 Testbarkeit

== Abschnitt 9 Entscheidungen
=== Aufgabe 9.1 Frontend-Anbindung

== Abschnitt 10 Qualitätsszenarien
=== Aufgabe 10.1 Qualitätsbaum
=== Aufgabe 10.2 Bewertungsszenarien

== Abschnitt 11 Risiken
=== Aufgabe 11.1 Anbindung Frontend
=== AUfgabe 11.2 Aufwand

== Abschnitt 12 Glossar
=== Aufgabe 12.1 Einstieg
=== Aufgabe 12.2 Begriffe


